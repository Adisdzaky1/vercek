<%- include('partials/header', { title: 'Dashboard' }) %>

<% if (user.vps) { %>
  <div class="card mb-4">
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <!-- Terminal -->
          <div class="card mb-3">
            <div class="card-body">
              <h5 class="card-title">Terminal</h5>
              <div class="card mb-3 rounded-3 border" id="terminal-container"></div>
              <div class="input-group">
                <input
                  type="text"
                  class="form-control"
                  placeholder="Command"
                  id="commandInput"
                  aria-label="Command"
                />
                <button class="btn btn-outline-primary" id="scmd">Send</button>
              </div>
            </div>
          </div>
        </div>
<div class="col-md-6">
  <!-- VPS Information -->
  <div class="card mb-4">
    <div class="card-body">
      <!-- Display VPS usage info above VPS details -->
      <ul class="list-unstyled">
        <li><strong>CPU Usage:</strong> <span id="cpu">Loading...</span></li>
        <li><strong>Memory Usage:</strong> <span id="memoryUsage">Loading...</span> / <span id="memoryLimit">Loading...</span></li>
        <li><strong>Disk Used:</strong> <span id="diskUsed">Loading...</span></li>
        <li><strong>Container Size:</strong> <span id="containerSize">Loading...</span></li>
      </ul>

      <h5 class="card-title">VPS Information</h5>
      
      <!-- VPS details in an unordered list -->
      <ul class="list-unstyled">
        <li><strong>IPv4:</strong> <%= user.vps.ip %></li>
        <li><strong>Port:</strong> <%= user.vps.port %></li>
        <li><strong>Username:</strong> root</li>
        <li><strong>Password:</strong> <%= user.vps.password %></li>
        <li><strong>Command:</strong> <code>ssh root@<%= user.vps.ip %> -p <%= user.vps.port %></code></li>
      </ul>

      <!-- Connect button -->
      <a href="ssh://root@<%= user.vps.ip %>:<%= user.vps.port %>" class="btn btn-success mt-3">
        <i class="fa fa-terminal"></i> Connect
      </a>
      
      <!-- Start/Stop Button -->
      <button class="btn btn-warning mt-3" onclick="stateVPS('<%= user.vps.containerId %>', '<%= user.vps.status === 'ON' ? 'OFF' : 'ON' %>')">
        <i class="ti ti-power-off"></i> <%= user.vps.status === 'ON' ? 'Stop' : 'Start' %>
      </button>
      
      <!-- Delete Button -->
      <button class="btn btn-danger mt-3" onclick="deleteVPS('<%= user.vps.containerId %>')">
        <i class="ti ti-trash"></i> Delete
      </button>
    </div>
  </div>
</div>

<script>
  // Fetch data from the API to populate the VPS usage info
  async function getVPSUsage() {
    try {
      const containerId = '<%= user.vps.containerId %>';
      const response = await fetch(`/vps/usage/${containerId}`);
      const data = await response.json();
      
      // Update the HTML with the data from the backend
      document.getElementById('cpu').innerText = data.cpuUsage;
      document.getElementById('memoryUsage').innerText = data.memoryUsage;
      document.getElementById('memoryLimit').innerText = data.memoryLimit;
      document.getElementById('diskUsed').innerText = data.diskUsed;
      document.getElementById('containerSize').innerText = data.containerSize;
    } catch (error) {
      console.error('Error fetching VPS usage data:', error);
    }
  }

  // Call the function to fetch the data and update the page
  getVPSUsage();
</script>
        
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
  const socket = io();  // Connect to the socket server
function mobileAndTabletCheck() {
        let check = false;
        (function (a) {
          if (
            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(
              a
            ) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
              a.substr(0, 4)
            )
          )
            check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
      }
      var isMobile = mobileAndTabletCheck();



      window.addEventListener("load", function () {
      if(<%= user.vps.status === 'ON' %>) {
        var username_qs = "root";
        var port_qs = "<%= user.vps.port %>";
        var hostname_qs = "<%= user.vps.ip %>";
        var password_qs = "<%= user.vps.password %>";
        var type_qs = getParameterByName("type");
        var command_qs = getParameterByName("command");

        if (
          username_qs !== "" &&
          port_qs !== "" &&
          hostname_qs !== "" &&
          password_qs !== ""
        ) {
          const data = {
            username: username_qs,
            password: password_qs,
            port: port_qs,
            hostname: hostname_qs,
            type: type_qs || "webshell",
            command: command_qs || null,
          };

          let socket = io({ query: data });
          console.log(
            "GOT Data from UI; Going to create a websocket for this connection."
          );
          var terminalContainer = document.getElementById("terminal-container");
          var fit = new FitAddon.FitAddon();
          var term = new Terminal({
            fontSize: isMobile ? 9 : 16,
            cursorBlink: true,
            theme: {
              background: "#282a36",
              foreground: "#fff",
              cursor: "#f8f8f2",
              cursorAccent: "#282a36",
              selection: "rgba(68, 71, 90, 0.3)",
              red: "red",
            },
          });
          term.loadAddon(fit);
          term.open(terminalContainer);
          term.setOption("padding", 5);
          fit.fit();
          this.term = term;

          this.socket = socket;
          socket.on("connect", function () {
            console.log("Connected to backend");
            term.write("\r\n*** Connected to backend***\r\n");
            term.onData(function (data) {
              socket.emit("data", data);
            });
            function sendCommand() {
              var commandInput = document.getElementById("commandInput");
              var command = commandInput.value;
              if (command.trim() !== "") {
                socket.emit("data", command + "\r");
                commandInput.value = ""; // Clear the input field after sending command
              }
            }
            document.getElementById("scmd").onclick = function () {
              sendCommand();
            };

            function handleKeyPress(event) {
              if (event.key === "Enter") {
                sendCommand();
              }
            }
            document
              .getElementById("commandInput")
              .addEventListener("keypress", handleKeyPress);

            // Backend -> Browser
            socket.on("data", function (data) {
              term.write(data);
              if (data.includes("SSH CONNECTION CLOSED")) {
                socket.disconnect();
                term.dispose();
              }
              if (
                data.includes("SSH CONNECTION ERROR:") ||
                data.includes("COMMAND EXECUTED CONNECTION CLOSED")
              ) {
                alert(data);
                socket.disconnect();
                term.dispose();
              }
            });

            socket.on("disconnect", function () {
              term.write("\r\n*** Disconnected from backend***\r\n");
            });
          });
        }
        } else {
alert("Status VPS off")
}
      });


      function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
          results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return "";
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      }
      
      

async function deleteVPS(containerId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to delete this VPS?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'No, cancel',
    });

    if (result.isConfirmed) {
        const response = await fetch('/vps/delete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ containerId })
        });
        const result = await response.json();
        if (response.ok) {
            Swal.fire(
                'Deleted!',
                'VPS deleted successfully!',
                'success'
            );
            location.reload();
        } else {
            Swal.fire(
                'Failed!',
                `Failed to delete VPS: ${result.error}`,
                'error'
            );
        }
    }
}

async function stateVPS(containerId, state) {
    const action = state === 'ON' ? 'start' : 'stop';
    const result = await Swal.fire({
        title: `Are you sure?`,
        text: `Do you really want to ${state === 'ON' ? 'start' : 'stop'} this VPS?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: `Yes, ${state === 'ON' ? 'start' : 'stop'} it!`,
        cancelButtonText: 'No, cancel',
    });

    if (result.isConfirmed) {
        const response = await fetch(`/vps/${action}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ containerId, state })
        });
        const result = await response.json();
        if (response.ok) {
            Swal.fire(
                `${state === 'ON' ? 'Started' : 'Stopped'}!`,
                `VPS ${state === 'ON' ? 'started' : 'stopped'} successfully!`,
                'success'
            );
            location.reload();
        } else {
            Swal.fire(
                'Failed!',
                `Failed to change VPS state: ${result.error}`,
                'error'
            );
        }
    }
}
  </script>

<% } else { %>
  <!-- Form to create VPS -->
  <div class="card mb-4">
    <div class="card-body">
      <h4 class="card-title">Create VPS</h4>
      <form id="createVpsForm">
        <div class="mb-3">
          <input type="text" id="vpsName" class="form-control" placeholder="VPS Name" required>
        </div>
        <div class="mb-3">
          <input type="password" id="password" class="form-control" placeholder="Password" required>
        </div>
        <button type="submit" class="btn btn-primary w-100">Create VPS</button>
        <small>Harap jangan di pakai mining, ddos, atau hal berbau illegal lain nya, arigato....</small>
        
      </form>
    </div>
  </div>
  <script>
document.getElementById('createVpsForm').addEventListener('submit', async function (e) {
  e.preventDefault();
  const vpsName = document.getElementById('vpsName').value;
  const password = document.getElementById('password').value;

  // Show loading alert
  Swal.fire({
    title: 'Creating VPS...',
    text: 'Please wait while your VPS is being created.',
    allowOutsideClick: false,
    allowEscapeKey: false,
    allowEnterKey: false,
    didOpen: () => {
      Swal.showLoading();
    }
  });

  try {
    const response = await fetch('/vps/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ vpsName, password })
    });

    const result = await response.json();
    if (response.ok) {
      // Close loading and show success alert
      Swal.fire({
        icon: 'success',
        title: 'VPS created successfully!',
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        location.reload();
      });
    } else {
      // Close loading and show error alert
      Swal.fire({
        icon: 'error',
        title: 'Failed to create VPS',
        text: result.error,
        showConfirmButton: true
      });
    }
  } catch (error) {
    // Close loading and show error alert
    Swal.fire({
      icon: 'error',
      title: 'Unexpected Error',
      text: 'An error occurred while creating the VPS. Please try again later.',
      showConfirmButton: true
    });
  }
});
  </script>
<% } %>

<%- include('partials/footer') %>